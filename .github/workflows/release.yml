name: Release CI

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: read
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Verify tag format
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Tag ${{ github.ref_name }} does not match expected semver pattern 'vX.Y.Z(-prerelease)'"
            exit 1
          fi

      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          draft: true
          generate_release_notes: true

  build-and-upload:
    name: Build and Upload Artifacts
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: x86_64-pc-windows-msvc, os: windows-2022, os_name: Windows, arch: x64, ext: .zip } # 明确版本
          - { target: x86_64-apple-darwin, os: macos-12, os_name: macOS, arch: x64, ext: .tar.gz } # 明确版本
          - { target: x86_64-unknown-linux-musl, os: ubuntu-22.04, os_name: Linux, arch: x64, ext: .tar.gz } # 明确版本
          - { target: aarch64-apple-darwin, os: macos-12, os_name: macOS, arch: arm64, ext: .tar.gz } # 明确版本
          - { target: aarch64-unknown-linux-musl, os: ubuntu-22.04, os_name: Linux, arch: arm64, ext: .tar.gz } # 明确版本

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      BINARY_NAME: sed-dl
      ARTIFACT_DIR: artifacts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        id: cargo-cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tool (cross)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: cargo install cross --git https://github.com/cross-rs/cross --branch main

      - name: Install Linux MUSL dependencies
        if: runner.os == 'ubuntu-22.04' && contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Configure MUSL linker for Linux
        if: runner.os == 'ubuntu-22.04' && contains(matrix.target, 'musl')
        run: |
          mkdir -p .cargo
          LINKER_NAME="musl-gcc"
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            LINKER_NAME="aarch64-linux-musl-gcc"
          fi
          cat << EOF > .cargo/config.toml
          [target.${{ matrix.target }}]
          linker = "$LINKER_NAME"
          rustflags = ["-C", "target-feature=+crt-static"]
          EOF

      - name: Configure Cross-compilation Environment
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          cat << EOF > Cross.toml
          [target.aarch64-unknown-linux-musl]
          image = "ghcr.io/cross-rs/aarch64-unknown-linux-musl:0.2.5"
          EOF

      - name: Run tests
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            cross test --release --target ${{ matrix.target }} --locked
          else
            cargo test --release --target ${{ matrix.target }} --locked
          fi

      - name: Build binary
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            cross build --release --target ${{ matrix.target }} --locked
          else
            cargo build --release --target ${{ matrix.target }} --locked
          fi

      - name: Prepare binary for packaging
        id: prep_binary
        shell: bash
        run: |
          SOURCE_NAME=$( if [[ "${{ matrix.os }}" == "windows-2022" ]]; then echo "${{ env.BINARY_NAME }}.exe"; else echo "${{ env.BINARY_NAME }}"; fi )
          echo "source_name=$SOURCE_NAME" >> $GITHUB_OUTPUT
          SOURCE_PATH="target/${{ matrix.target }}/release/$SOURCE_NAME"
          echo "source_path=$SOURCE_PATH" >> $GITHUB_OUTPUT
          echo "Stripping binary..."
          if [[ "${{ matrix.os }}" != "windows-2022" ]]; then
            STRIP_COMMAND="strip"
            if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
              STRIP_COMMAND="aarch64-linux-musl-strip"
            fi
            "$STRIP_COMMAND" "$SOURCE_PATH"
          fi

      - name: Package artifact and generate checksum
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ${{ env.ARTIFACT_DIR }}
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          SOURCE_NAME="${{ steps.prep_binary.outputs.source_name }}"
          SOURCE_PATH="${{ steps.prep_binary.outputs.source_path }}"
          DEST_ARCHIVE_NAME="${{ env.BINARY_NAME }}_${VERSION}_${{ matrix.os_name }}_${{ matrix.arch }}${{ matrix.ext }}"
          DEST_ARCHIVE_PATH="${{ env.ARTIFACT_DIR }}/$DEST_ARCHIVE_NAME"
          if [[ "${{ matrix.ext }}" == ".zip" ]]; then
            tar -acf "$DEST_ARCHIVE_PATH" -C "$(dirname "$SOURCE_PATH")" "$SOURCE_NAME"
          else
            tar -czf "$DEST_ARCHIVE_PATH" -C "$(dirname "$SOURCE_PATH")" "$SOURCE_NAME"
          fi
          cd ${{ env.ARTIFACT_DIR }}
          sha256sum "$DEST_ARCHIVE_NAME" > "${DEST_ARCHIVE_NAME}.sha256"
          cd ..

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.ARTIFACT_DIR }}/*

  publish-release:
    name: Publish Release
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-22.04 # 【采纳建议】: 明确版本
    permissions:
      contents: write
    steps:
      - name: Publish the Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false