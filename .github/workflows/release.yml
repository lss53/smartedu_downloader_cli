name: Release CI

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

jobs:
  # Job 1: 创建一个草稿 Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          # 设置为 true 来创建一个草稿，这样在文件上传完成前它都不可见
          draft: true
          # 在这个 Job 中生成发行说明
          generate_release_notes: true

  # Job 2: 构建并上传所有平台的产物
  build-and-upload:
    name: Build and Upload
    # 这个 Job 依赖于 create-release Job 的成功
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            source_name: sed-dl.exe
            os_name: Windows
            arch: x64
            ext: .zip
          - target: x86_64-apple-darwin
            os: macos-latest
            source_name: sed-dl
            os_name: macOS
            arch: x64
            ext: .tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            source_name: sed-dl
            os_name: Linux
            arch: x64
            ext: .tar.gz

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install musl-tools for Linux static build
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Configure musl linker
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p .cargo
          echo '[target.x86_64-unknown-linux-musl]' >> .cargo/config.toml
          echo 'linker = "x86_64-linux-musl-gcc"' >> .cargo/config.toml
      
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          ARTIFACT_DIR="artifacts"
          mkdir -p $ARTIFACT_DIR
          VERSION=${GITHUB_REF_NAME#v}
          DEST_ARCHIVE_NAME="sed-dl_${VERSION}_${{ matrix.os_name }}_${{ matrix.arch }}${{ matrix.ext }}"
          DEST_ARCHIVE_PATH="$ARTIFACT_DIR/$DEST_ARCHIVE_NAME"
          SOURCE_DIR="target/${{ matrix.target }}/release"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pushd $SOURCE_DIR
            7z a "../../../$DEST_ARCHIVE_PATH" "${{ matrix.source_name }}"
            popd
          else
            tar -czf "$DEST_ARCHIVE_PATH" -C "$SOURCE_DIR" "${{ matrix.source_name }}"
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          # 将打包好的文件上传到之前创建的草稿 Release
          files: artifacts/*

  # Job 3: 在所有产物上传后，正式发布 Release
  publish-release:
    name: Publish Release
    # 这个 Job 依赖于 build-and-upload Job 的成功
    needs: build-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Publish the Release
        uses: softprops/action-gh-release@v2
        with:
          # 将 draft 标志设置为 false 来正式发布它
          draft: false