# .github/workflows/release.yml

name: Release CI

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # 当一个 'vX.Y.Z' 格式的 tag 被推送时触发

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release Binaries
    needs: create-release
    strategy:
      matrix:
        # 定义不同平台的编译配置
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: smartedu_downloader_cli-windows-x64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: smartedu_downloader_cli-macos-x64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: smartedu_downloader_cli-linux-x64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      # Windows 需要特殊处理，因为 cargo build 会将 .exe 放在 target/release 目录下
      - name: Prepare artifact for Windows
        if: matrix.os == 'windows-latest'
        run: |
          mv target/${{ matrix.target }}/release/smartedu_downloader_cli.exe ${{ matrix.artifact_name }}

      # Linux/macOS 的可执行文件路径不同
      - name: Prepare artifact for Linux/macOS
        if: matrix.os != 'windows-latest'
        run: |
          mv target/${{ matrix.target }}/release/smartedu_downloader_cli ${{ matrix.artifact_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream